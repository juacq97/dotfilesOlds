#+title: Emacs configuration
 #+PROPERTY: header-args:emacs-lisp :tangle ~/.repos/dotfiles/.emacs.d/init.el
 
* About this file
This is my own Emacs configuration. I started to use emacs about 3 years ago, and I can't remember how many times I have re-written this file. This is the first time I try to write it entirely in english, so expect typos. I'm not a lisp master, I even don''t understand a lot of this file entirely, so maybe there's a lot better way to do some things. A lot of code was copied from internet and I can't remember where now. Shutouts to [[https://github.com/daviwil][David Wilson]],  [[https://cestlaz.github.io/][Mike Zamansky]], [[https://protesilaos.com/][Protesilaos Stavrou]] and specially, to [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave]], because is thanks to his videos I started to use and finally configure Emacs for the first time, that rainy day in september 2018.

This is an ~org-mode~ file, so you can read it directly from emacs.

* Startup 
Set the garbage collection to a better number for the load. Also, a message with the time and garbage collection is showed.
#+begin_src emacs-lisp
    ;; Profile emacs startup
    ;; The default is 800 kilobytes.  Measured in bytes. (setq gc-cons-threshold (* 50 1000 1000))
    (add-hook 'emacs-startup-hook
              (lambda ()
                (message "*** Emacs loaded in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)))
;(setq comp-deferred-compilation t)
;  (setq comp-async-report-warnings-errors nil)
#+end_src
** Use-package
~use-package~ is a macro set to install and configure packages.
#+begin_src emacs-lisp
  (require 'package)
  ;; Allows to install packages from melpa
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
			
  
    ;;(setq package-archives
    ;;      '(("melpa" . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/melpa/")
    ;;        ("org"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/org/")
    ;;        ("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/")))


        (package-initialize)

        (add-to-list 'load-path "~/.emacs.d/modes/")
        (add-to-list 'load-path "~/.repos/nano-emacs")
        ;; If not here, install use-package
        (unless (package-installed-p 'use-package)
          (package-refresh-contents)
          (package-install 'use-package))

        ;; Automatically download all packages. To prevent this, add ~:ensure nil~
        (setq use-package-always-ensure t)
      ;;  (setq use-package-verbose t)
#+end_src
* Basic configurations
** UI and QOL configurations
This include a lot of configurations so Emacs doesn't look like a very ugly notepad. 
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (global-set-key (kbd "M-m") 'menu-bar-mode) ; Opens the menu with M-m, very KDE-ish
  (column-number-mode 1) ; The modeline shows the column number at the end
  (setq frame-resize-pixelwise t)
  #+end_src
  
How you doing angrybacon?

#+begin_src emacs-lisp
  (setq  cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
         select-enable-clipboard t              ; Merge system's and Emacs' clipboard
          x-stretch-cursor t)                    ; Stretch cursor to the glyph width

#+end_src
  
  This enables the line numbers at the left. It adds some customization to look fine even with variable-pitch fonts.
  
  #+begin_src emacs-lisp
    (global-display-line-numbers-mode)
    (setq display-line-numbers-type 'relative)

    (set-face-attribute 'line-number nil :inherit nil)
    (set-face-attribute 'line-number-current-line nil :inherit nil)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    org-agenda-mode-hook
                    term-mode-hook
                    vterm-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook
                    elpher-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Here's some QOL configurations
#+begin_src emacs-lisp
       (show-paren-mode t) ; Highlight the matching parenthesis
       (blink-cursor-mode 0) ; Disable the blinking
       ;; Press y/n instead of the whole word
       (defalias 'yes-or-no-p 'y-or-n-p)
       ;; Scroll line by line. Cursor doesn't stays at the center of the screen. Can be laggy
       (setq scroll-conservatively 100)
       ;; Disable backups. I'm not sure I want this disabled, but opening files it's veeeery slow
       (setq make-backup-files nil) 
       (setq backup-directory-alist
             `((".*" . ,"~/.emacs.d/backups/")))
       (setq auto-save-file-name-transforms
             `((".*" ,"~/.emacs.d/backups/")))
       (setq auto-save-list-file-prefix nil)
       (setq auto-save-default nil)
  
       ;; This function allows to quicky open this file
       ;; TODO: MOVE THIS TO ANOTHER PLACE
       (defun config-visit ()
         (interactive)
         (find-file "~/.emacs.d/config.org"))
       (global-set-key (kbd "C-c e") 'config-visit)
  
      ;; Updates the config fiel with C-c r
       (defun config-reload ()
         (interactive)
         (load-file user-init-file))
       (global-set-key (kbd "C-c r") 'config-reload)
  
       (global-visual-line-mode 1) ; wrap lines to the size of the buffer
  
       ;; Disables the ugly splash screen 
       (setq inhibit-splash-screen t)
       (setq initial-scratch-message nil) ; Disable the scratch mesage
       (setq initial-major-mode (quote org-mode)) ; Change the mode of the scratch buffer
  
       ;; With this, emacs will not ask if I want to edit the symlink every time
       (setq vc-follow-symlinks nil)
  
       ;; This is necessary on 27+ to write accents (needed to write spanish). They say it's a feature... not for me!
       (require 'iso-transl)
  
  ;; When a split is done, follow it.
    (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  
    (defun split-and-follow-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  
#+end_src

** Fonts
Fonts are a ~face~. You can set different faces. I define three kind of fonts here:
- Default: The default font
- fixed-pitch: The monospace font
- Variable-pitch: The "normal" font
#+begin_src emacs-lisp
    (set-face-attribute 'default nil :family "Fira Code" :height 102)
    (set-face-attribute 'fixed-pitch nil :family "Fira Code")
    (set-face-attribute 'variable-pitch nil :family "Open Sans")
#+end_src

** Emojis
To be able to see emojis on emacs the following packages are needeed 🦀

#+begin_src emacs-lisp
  (use-package emojify
    :config
    (global-emojify-mode))
#+end_src

* Keybindings
** Evil
Evil it's a layer to use vim-like keybindings on Emacs.It's basically, VIM inside Emacs. There some functions of VIM that doesn't work inside Evil though or it does but different. Evil-mode calls the vim modes "states", because Emacs has his own meaning for the word "mode". 

To undo, ~undo-tree~ is needed.
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
  (global-undo-tree-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    ;; This variable has issues with some commands, example, ~vi~ to append text at the beggining of the lines.
    (setq evil-want-keybinding nil)
    :custom
    ;; This variable needs to be setted by ~customize-group RET evil~. That's why use :custom instead of (setq).
    ;; this is needed to the undo feature
    (evil-undo-system 'undo-tree)
    :config
    (setq-default evil-cross-lines t)
    (evil-mode 1))
#+end_src

** Evil collection and friends
Evil does works fine with text, but some modes has special keybindings or are interactive buffers, so Evil conflict with them. That's why ~evil-collection~ exists. Basically, it's a collection of key-maps for different modes.
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

There's some modes not supported by ~evil-collection~.
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook ((org-mode . evil-org-mode)
	   (evil-org-mode . (lambda ()
			      (evil-org-set-key-theme))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    ;; This are keybindings for org-agenda
    (evil-define-key 'motion org-agenda-mode-map
      (kbd "C-p") 'org-agenda-earlier
      (kbd "C-n") 'org-agenda-later))
#+end_src

By defaut, evil moves on physical lines instead of visual lines. This is annoying, because most of the time I work with text and ~visual-line-mode~ enabled. This fix it.
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
#+end_src

** Global keybindings
I'm using =general= to create keybindings using a ~leader~ key.

#+begin_src emacs-lisp

(global-unset-key (kbd "C-z"))
  (use-package general
    :config
    (general-create-definer my/leader-keys
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
      :global-prefix "C-SPC")

    (my/leader-keys
     "SPC" '(find-file :which-key "Open a file")
     "k" '(kill-current-buffer :which-key "Kill buffer")
     "b" '(consult-buffer :which-key "Switch buffer")
     "s" '(consult-line :which-key "Search")
     "p" '(projectile-find-file :which-key "Projectile, find file")
     "P" '(projectile-switch-project :which-key "Projectile, switch project")
     "g" '(magit :which-key "Magit")
     "v" '(visual-line-mode :which-key "Activate visual-line-mode")
     "c" '(org-capture :which-key "Capture with org")
     "u" '(winner-undo :which-key "Undo layout")
     "r" '(winner-redo :which-key "Redo layout")
     "RET" '((lambda () (interactive) (shell-command "alacritty > /dev/null 2>&1 & disown")))))
#+end_src

Since ~Evil~ it's working now, this is a good moment to define some personal keybindings.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-c v") 'visual-line-mode)
  (global-set-key (kbd "<f5>")  'ispell-word)
#+end_src

* Selectrum
#+begin_src emacs-lisp
  (use-package selectrum
    :ensure t
    :init
    (selectrum-mode +1))
  
  (use-package savehist
    :init
    (savehist-mode))
  
  (use-package orderless
    :init
    (setq completion-styles '(orderless))
    (setq orderless-skip-highlighting (lambda () selectrum-is-active))
    (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))
  ;;
  (use-package marginalia
    :after selectrum
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
  ;;
  (use-package consult
    :ensure t
    :bind (
           ("C-s" . consult-line)
           ("C-x b" . consult-buffer)))
  
  
#+end_src
* Completion framework
I'm using =ivy= as my completion method. I like some fuzzy finding and the cool icons you can add to =ivy= to make it nicer.
** Ivy
#+begin_src emacs-lisp
 ;; (use-package ivy
 ;;   :ensure t
 ;;   :config
 ;;   (setq ivy-use-virtual-buffers t
 ;;         ivy-count-format "%d/%d ")
 ;;   (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
 ;;       			  (t . ivy--regex-fuzzy)))
 ;;   (setq ivy-extra-directories nil)
 ;;   (ivy-mode 1))
#+end_src

~ivy-rich~ adds some extra functionality. My favorite: a description of the command right on the minibuffer.
NOTE: THIS PACKAGE MAKES SWITCH BUFFERS PAINFULLY SLOW. IS DEPRECATED IN MY CONFIG FOR NOW
#+begin_src emacs-lisp
 ;; (use-package ivy-rich 
 ;;   :ensure t
 ;;   :config
 ;;   (ivy-rich-mode 1))
#+end_src

~ivy-prescient~ adds a sort of history to ~ivy~, so it remembers my latest commands.
#+begin_src emacs-lisp
  ;;(use-package ivy-prescient
  ;;  :ensure t
  ;;  :config
  ;;  (prescient-persist-mode 1)
  ;;  (ivy-prescient-mode 1))
#+end_src

** Counsel
~counsel~ adds some fixes to the search mechanism of Emacs. It's necesary for some packages and replaces some default commands like ~M-x~.
#+begin_src emacs-lisp
 ;; (use-package counsel
 ;;   :ensure t
 ;;   :custom
 ;;   (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
 ;;   :bind (
 ;;          ("M-x" . counsel-M-x)
 ;;          ("C-x C-f" . counsel-find-file)
 ;;          ("C-x b" . counsel-switch-buffer))

 ;;   :config
 ;;   (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
 ;;   (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
 ;;   (counsel-mode 1))
#+end_src

** Swiper
A searching tool. It uses counsel and ivy. It adds a minibuffer with the matching results.
#+begin_src emacs-lisp
 ;; (use-package swiper
 ;;   :ensure t
 ;;   :bind (("C-s" . swiper)))
#+end_src
* Utilities
There a lot of usefull packages, and they work excellent out of the box. 
** Which key
A helper to remember keybindings. If I wait a moment, a mini-buffer appears with some keybindings after I press a keychord.ni
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :ensure t
    :init
    (which-key-mode))
#+end_src

** Magit
The best client for git, only on Emacs.
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :ensure t
    :config
    (global-set-key (kbd "C-x C-g") 'magit))
#+end_src

** Rainbow mode
If an hexagesimal color is on screen, you can see the actual color as the background of the string.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t
    :ensure t
    :config
    (rainbow-mode 1))
#+end_src

** Smart parents
Autocomplete parenthesis. If you type the left parenthesis, the right one appears automatically. On elisp it's a need.
NOTE: For some weird reason, it causes problems. It spawns a lot of \*Emacs\* buffers.
#+begin_src emacs-lisp
  ;(use-package smartparens
  ;  :hook (prog-mode . smartparents-mode)
  ;  :ensure t
  ;  :config
  ;  (smartparens-mode t))
#+end_src
** Rainbow delimiters
Parenthesis are colored, so it's easy to identify matching parenthesis.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Yasnippet
Snippets are templates that are called interactively. I can write my own snippets.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode))
#+end_src

** Projectile
Projectile allows you to quickly switch between files inside projects. =git= repos are considered projects.
#+begin_src emacs-lisp
      (use-package projectile
      :bind (("C-c p" . projectile-find-file) ("C-c P" . projectile-switch-projects))
    :ensure t
  :config (setq projectile-project-search-path '("~/.repos" "/mnt/Data/Drive/CIMB/PLANEACIONES")))
#+end_src
** Company
Adds some autocompletions. It can be slower than the actual typing tho. 
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :config
    (global-company-mode 1))
#+end_src
** Helpful
Add some extra text to the  =describe= buffers
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (describe-function-function #'helpful-callable)
    (describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Ripgrep
Like ~grep~, but cooler. It needs ~ripgrep~ installed.
#+begin_src emacs-lisp
  (use-package rg
    :defer 0
    :ensure t)
#+end_src
** Writeroom-mode
   When enabled, the text it's centered and the modeline disappears. Excellent to long writing sessions.
 #+begin_src emacs-lisp
 (use-package writeroom-mode
     :ensure t
     :bind ("<f6>" . writeroom-mode))
 #+end_src 
 
** Ace window
#+begin_src emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window)
    :config
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-minibuffer-shortcut ?z))


#+end_src
* Elfeed
Elfeed is a RSS feeds reader. It can sync my news with newscloud throught the elfeed-protocol package.
#+begin_src emacs-lisp

;;  (use-package elfeed
;;    :config
;;    (setq elfeed-search-filter "@4-months-ago +unread")
;;    (setq elfeed-show-unique-buffers t))
#+end_src

#+begin_src emacs-lisp
;;  (use-package elfeed-org
;;    :config
;;    (elfeed-org)
;;    (setq rmh-elfeed-org-files (list "~/.repos/dotfiles/.emacs.d/feeds.org")))
#+end_src

#+begin_src emacs-lisp
;;    (use-package elfeed-protocol
;;      :config
;;      (setq elfeed-use-curl t)
;;      (elfeed-set-timeout 36000)
;;      (setq elfeed-curl-extra-arguments '("--insecure")) ;necessary for https without a trust certificate
;;      ;; setup extra protocol feeds
;;
;;      (defadvice elfeed (after configure-elfeed-feeds activate)
;;        "Make elfeed-org autotags rules works with elfeed-protocol."
;;        (setq elfeed-protocol-tags elfeed-feeds)
;;        (setq elfeed-feeds '(
;;                             ;; format 6, for password in pass(1), using password-store.el
;;                             ("owncloud+https://admin@cloud.juancastro.xyz"
;;                              :password (password-store-get "nextcloud/admin")
;;                              :autotags elfeed-protocol-tags))))
;;
;;        ;; use autotags
;;
;;        ;; enable elfeed-protocol
;;        (elfeed-protocol-enable))
#+end_src

* Dired
~Dired~ it's the Emacs buit-in file manager. Dired it's awesome, it does a lot out of the box liike compress, copy, move ("rename" in dired language), delete, and of course, edit files. There's some extensions to add more functionality, so you can have a very powerfull file manager, even better than ~ranger~, ~nnn~ or ~lf~.

Dired it's great, but  while dired is awesome inside Emacs, maybe you'll have problems trying to open files externally, let's say videos or LibreOffice files. Right now, I think I have a good setup and I can use it.

Lets configure this thing!
#+begin_src emacs-lisp
      (use-package dired
        :ensure nil ; it's a built-in package
        :commands (dired dired-jump)
        :bind (("C-x C-j" . dired-jump) ; To quickly open a dired buffer on the file path
               ("C-<return>" . (lambda () (interactive) (shell-command "alacritty > /dev/null 2>&1 & disown")))) ; To quickly open a Terminal window
        :hook (
               (dired-mode . dired-hide-details-mode)
               (dired-mode . hl-line-mode))
        :config
        (setq dired-listing-switches "-AgGhovF --group-directories-first") ; man ls to details
        (setq dired-recursive-copies 'always)
        (setq dired-recursive-deletes 'always)
        (setq delete-by-moving-to-trash t) ;It uses the trash bin
        (setq dired-dwim-target 'dired-dwim-target-next-visible) ; If I have two buffers or frames open and I try to copy a file from one buffer, it understand that I want to copy it to the other buffer.

        ;; Some keybindings. It makes use of the ~evil-collection~ key-map and (maybe) replaces some default keybindings.
        (evil-collection-define-key 'normal 'dired-mode-map
          "h" 'dired-single-up-directory
          "l" 'dired-open-file
          "nd" 'dired-create-directory
          "nf" 'dired-create-empty-file
          "/" 'swiper
          "gj" 'counsel-bookmark)
  )
#+end_src

By default dired creates a new buffer for every directory open. This will create a mess of buffers with a lot of dired buffers open. This packages try to avoid this, but dired still creates some buffers. 
#+begin_src emacs-lisp
  (use-package dired-single
    :after dired
    :ensure t)
#+end_src

As I said before, the integration with external tools can be improved. This package tries to do that. The main problem with this is you need to specify the extension, so this list it'll be huge very easily. There's a variable to use ~xdg-open~ instead but it has problems. If only I could use mime types instead.

#+begin_src emacs-lisp
  (use-package dired-open
    :after dired
    :ensure t
    :config
    (setq dired-open-extensions '(
                                  ;; Images
                                  ("png" . "rifle_sxiv.sh")
                                  ("jpg" . "rifle_sxiv.sh")
                                  ;; Multimedia
                                  ("mp4" . "mpv")
                                  ("mkv" . "mpv")
                                  ("mp3" . "mpv")
                                  ("aac" . "mpv")
                                  ("ogg" . "mpv")
                                  ("avi" . "mpv")
                                  ("mov" . "mpv")
                                  ("flac" . "mpv")
                                  ;; libreoffice
                                  ("odt" . "libreoffice")
                                  ("odf" . "libreoffice")
                                  ("ods" . "libreoffice")
                                  ("xlsx" . "libreoffice")
                                  ("odp" . "libreoffice")
                                  ;; Otros
                                  ("pdf" . "zathura")
                                  )))
#+end_src

Dired shows your dotfiles or it doesn't. This packages allows to toggle the directories that starts with a period. I added a keybinding to toggle it.

#+begin_src emacs-lisp
    (use-package dired-hide-dotfiles
      :ensure t
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "zh" 'dired-hide-dotfiles-mode)
  )
#+end_src

This is an interesting package. It adds a tree layout to dired, so I can navigate directories in a similar fashion to ~org-mode~.
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :ensure t
    :config
    (setq dired-subtree-use-backgrounds nil)
    ;; this snippet adds icons from all-the-icons to the subtree
    (advice-add 'dired-subtree-toggle :after (lambda ()
					       (interactive)
					       (when all-the-icons-dired-mode
						 (revert-buffer)))))
#+end_src

This is needed to launch dired with a keybinding from my window manager
#+begin_src emacs-lisp
  (defun dired-frame ()
    (interactive)
    (dired)
    (delete-other-windows))
#+end_src

* UI and appeareance stuff
** Doom-modeline
The default modeline it's fine, but ugly and with a lot of useless information for me. I could customize it, but it's easier to just install ~doom-modeline~ the default modeline of ~doom-emacs~. Most of this is a copy-paste from the official README.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :ensure t
      :config
      (add-hook 'window-selection-change-functions #'doom-modeline-set-selected-window)
      (setq doom-modeline-height 25)
      (setq doom-modeline-bar-width 4)
      (setq doom-modeline-buffer-file-name-style 'relative-from-project)
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-modal-icon t)
      (setq doom-modeline-major-mode-color-icon t)
      (setq doom-modeline-minor-modes nil)
      (setq doom-modeline-buffer-encoding nil)
      (setq doom-modeline-enable-word-count t)
      (setq doom-modeline-checker-simple-format t)
      (setq doom-modeline-persp-name t)
      (setq doom-modeline-lsp nil)
      (setq doom-modeline-github nil)
      (setq doom-modeline-env-version t)
      (setq doom-modeline-env-enable-python t)
      (setq doom-modeline-env-enable-ruby t)
      (setq doom-modeline-env-enable-perl t)
      (setq doom-modeline-env-enable-go t)
      (setq doom-modeline-env-enable-elixir t)
      (setq doom-modeline-env-enable-rust t)
      (setq doom-modeline-env-python-executable "python")
      (setq doom-modeline-env-ruby-executable "ruby")
      (setq doom-modeline-env-perl-executable "perl")
      (setq doom-modeline-env-go-executable "go")
      (setq doom-modeline-env-elixir-executable "iex")
      (setq doom-modeline-env-rust-executable "rustc")
      (setq doom-modeline-mu4e t)
      (setq doom-modeline-irc t)
      (setq doom-modeline-irc-stylize 'identity))
  (doom-modeline-mode 1)    
#+end_src
** Heaven and Hell
This packages allow to quicky change between two themes. The recommended setup, a light and a dark theme.
#+begin_src emacs-lisp
  (use-package heaven-and-hell
    :ensure t
    :init
    (setq heaven-and-hell-theme-type 'dark)
    (setq heaven-and-hell-load-theme-no-confirm t)
    (setq heaven-and-hell-themes
	  '((light . doom-one-light)
	    (dark . doom-dracula)))
    :hook (after-init . heaven-and-hell-init-hook)
    :bind (("C-c <f7>" . heaven-and-hell-load-default-theme)
	   ("<f7>" . heaven-and-hell-toggle-theme)))
#+end_src

** Themes
  Emacs has a lot of themes available on internet. It's possible to set one with ~(load-theme)~. Check the ~heaven&hell~ package below.
*** Doom-themes
A collection of themes designated for ~doom-emacs~.
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src

*** Modus theme
   The famous modus themes by Protesilaos Stavrou. Sadly, I can't stand the dark theme. Too dark for my taste.
 #+begin_src emacs-lisp
   (use-package modus-vivendi-theme
     :ensure t)
   (use-package modus-operandi-theme
     :ensure t
     :config
     (setq modus-operandi-theme-slanted-constructs t)
     (setq modus-operandi-theme-syntax 'alt-syntax))
 #+end_src

** Transparency
To have cool transparency. It can be managed throught =picom= too.
#+begin_src emacs-lisp
 ;; (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
 ;; (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src
** Dashboard
A cool dashboard. Deprecated in my config in favor of a simple =*scratch*= buffer.
#+begin_src emacs-lisp 
;;  (use-package fortune-cookie
;;    :ensure t
;;    :custom
;;    (fortune-dir "/usr/share/fortunes"))
;;
;;  (use-package dashboard
;;    :ensure t
;;    :config
;;    (dashboard-setup-startup-hook)
;;    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
;;    (setq dashboard-banner-logo-title "Welcome to Emacs")
;;    (setq dashboard-startup-banner 'logo)
;;    (setq dashboard-show-shortcuts nil)
;;    (setq dashboard-set-init-info nil)
;;    (setq dashboard-footer-messages nil)
;;    (setq dashboard-banner-logo-title nil)
;;    (setq dashboard-items '(
;;                            (bookmarks . 5)
;;                            (projects . 5)
;;                            (agenda . 5)))
;;    (setq dashboard-center-content t)
;;    (setq dashboard-page-separator "\n\n")
;;    (setq dashboard-set-heading-icons t)
;;    (setq dashboard-set-file-icons t))
#+end_src
** All the icons
Cool icons! It adds icons to ~doom-modeline~, ~dired~ and ~ivy~. Remember to run ~all-the-icons-install-font~ to actually see the icons. 
#+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t)

    ;; Icons for dired
    (use-package all-the-icons-dired
      :ensure t
      :hook (dired-mode . (lambda ()
                            (interactive)
                            (unless (file-remote-p default-directory)
                              (all-the-icons-dired-mode)))))
  ;; (use-package all-the-icons-ivy
  ;; :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))

    ;; Icons for ivy
 ;;   (use-package all-the-icons-ivy-rich
 ;;     :ensure t
 ;;     :after ivy-rich
 ;;     :config
 ;;     (all-the-icons-ivy-rich-mode 1))
#+end_src
* Org-mode
The killer feature of Emacs and the reason why I started to use Emacs. Org-mode it's a note taking and schedulling format with some markup capabilities. This "markup" it's more powerful than any other. You can create tables, spreadsheets, run code (just see this config file), export to a lot of formats, the integration with LaTeX it's awesome, and there's a lot of plugins and packages to extend it. If you want an idea of the potential of org-mode, my thesis was written almost entirely on org-mode with cites, bibliography, images, tables and everything else; just the final design (fonts, colors and things like that) was made with LibreOffice, and that's beacause I didn't knew a lot of LaTeX back then.

I spend most of the time on org-mode. Since I'm not a developer it takes the place of word processors, simple spreadsheets and any calendar and /todo/ application. SO this section it'll be long, but the most important to me.

** Fonts
It's possible to mix monospace fonts with variable-spaced fonts. To activate this behaviour, enable ~variable-pitch-mode~. This uses the fonts declared at the beggining of the document.
#+begin_src emacs-lisp
  (defun my/org-font-setup ()
    (require 'org-faces) 
    (set-face-attribute 'org-block nil :foreground nil :inherit '(fixed-pitch))
    (set-face-attribute 'org-code nil :inherit '(fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit '(fixed-pitch))
    ;; THIS defun CONTINUES BELOW
#+end_src

Now, let's make a more elegant style, without colors for title and with different sizes.
#+begin_src emacs-lisp
    ;;; Remove the word #+TITLE:
    (setq org-hidden-keywords '(title))
    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant => no scaling
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.1) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.3) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.5) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    ;; Document Title, (\huge)
    (set-face-attribute 'org-document-title nil
                        :height 2.074
                        :foreground 'unspecified
                        :inherit 'org-level-8)
  ) ;; <=== org-font-setup ends here
#+end_src
** org-mode configuration
Here's some configuration I made to org-mode, the actual package.
#+begin_src emacs-lisp
   (defun my/org-mode-setup ()
     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1))

     (use-package org
       :ensure nil
       :hook (
              (org-mode . my/org-mode-setup)
              (org-mode . my/org-font-setup))

       :config
       ;;(add-hook 'org-mode-hook 'my/org-font-setup)
       ;; Removes the ellipsis at the end and replaces it with a string
       (setq org-ellipsis " ⤾")

       ;; Now you can put [[color:red][red text]] when export to html
       (org-add-link-type
         "color"
         (lambda (path)
           (message (concat "color "
                            (progn (add-text-properties
                                    0 (length path)
                                    (list 'face `((t (:foreground ,path))))
                                    path) path))))
         (lambda (path desc format)
           (cond
            ((eq format 'html)
             (format "<span style=\"color:%s;\">%s</span>" path desc))
            ((eq format 'latex)
             (format "{\\color{%s}%s}" path desc)))))



       ;; If you have many subtask, when you mark it as DONE, the main task remain unchaged. With this function, if all the subtask are marked as DONE, the main task is marked as well.
       (defun org-summary-todo (n-done n-not-done)
         "Switch entry to DONE when all subentries are done, to TODO otherwise."
         (let (org-log-done org-log-states)   ; turn off logging
           (org-todo (if (= n-not-done 0) "DONE" "PROJ"))))
       (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
       ;; This keybinding uses org-store-link to store a postition on a document, so you can link it on other document.
       (global-set-key (kbd "C-c l") 'org-store-link)

       ;; Change TODO states with SPC t. It uses evil-collection key-map.
       ;;(evil-define-key 'normal org-mode-map
       ;;  (kbd "SPC t") 'org-todo)

   ;; Activate org-beamer
     (org-beamer-mode)

       ;; You can add blocks pressing C-, and then the corresponding key.
     (require 'org-tempo)
     (setq org-structure-template-alist
        '(("el" . "src emacs-lisp")
          ("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("x" . "export latex")
          ("q" . "quote")
          ("s" . "src")
          ("v" . "verse")))

   ;; NOTE: THE USE PACKAGE MACRO CONTINUES
#+end_src
** LaTeX
   LaTeX uses some templates to define classes. You can write your own classes. I have this, one used on my thesis, the other copied from the org-wiki because it looks nice.

#+begin_src emacs-lisp
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))

  (use-package ox-latex
    :ensure nil
    :config
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    ;; (setq org-latex-prefer-user-labels t)
  
    ;; deleted unwanted file extensions after latexMK
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))
  
    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil)))

    ;; https://github.com/philipphoman
      (add-to-list 'org-latex-classes
              '("mybeamerposter"
                "\\documentclass[final]{beamer}
                 \\usepackage[orientation=portrait,size=letter]
                 \\usepackage[absolute,overlay]{textpos}
                       \\usepackage[authoryear]{natbib}
                       [NO-DEFAULT-PACKAGES]"))
#+end_src
   
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
        '("koma-article"
          "\\documentclass{scrartcl}"
          "\\usepackage[left=3cm,right=4.5cm,bottom=3cm,top=10cm]{geometry}"
          ("\\section{%s}" . "\\section*{%s}")
          ("\\subsection{%s}" . "\\subsection*{%s}")
          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
          ("\\paragraph{%s}" . "\\paragraph*{%s}")
          ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

        '("doc-recepcional"
          "\\documentclass{report}"
          ("\\chapter{%s}" . "\\chapter*{%s}")
          ("\\section{%s}" . "\\section*{%s}")
          ("\\subsection{%s}" . "\\subsection*{%s}")
          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
          ("\\paragraph{%s}" . "\\paragraph*{%s}")
          ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  ) ;; <=== The use-package org ends here
#+end_src
** Center buffers
   
This centers some buffers. Just aesthetics.
First, lets define the function.
#+begin_src emacs-lisp
  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

;    (use-package visual-fill-column
;      :hook (
;      (org-agenda-mode . my/org-mode-visual-fill)
;      (org-mode . my/org-mode-visual-fill)
;      (elpher-mode . my/org-mode-visual-fill)))
#+end_src

** More export formats
Though org-mode has a long range of formats, we can add more.
#+begin_src emacs-lisp
  ;; Pandoc support
  (use-package ox-pandoc
    :after org
    :ensure t)

    
#+end_src
** Superstar
It replaces the stars for bullets and unicode glyphs. It looks nice and it's easier to read. Also, changes some TODO keywords.
#+begin_src emacs-lisp
     (use-package org-superstar
       :ensure t
       :config
       (setq superstar-special-todo-items t))

     (defun my/org-enable-prettify ()
       (setq prettify-symbols-alist
             '(("DROP" . ?✖)
               ("EMISION" . ?✒)
               ("FINALIZADO" . ?✔)
               ("LIKE" . ?❤)))
       (prettify-symbols-mode 1))
     (add-hook 'org-mode-hook 'my/org-enable-prettify)

    ;; This hook enables org-superstar 
     (add-hook 'org-mode-hook
               (lambda ()
                 (org-superstar-mode 1)))
#+end_src
** Org-tree-slide
Want to make a presentation with slides but don't want to use PowerPoint, beamer or some ridiculous web-based slides? Just use Emacs and org-mode to show your slides. The slides are, basically, narrowed org buffers, so they're editable and you can use the complete power of org-mode and Emacs.
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :defer t
    :config
    (setq org-tree-slide-header t)
    (setq org-tree-slide-slide-in-effect nil)
    )

  ;; This packages hides the modeline because I don't know how to hide it without it.
  (use-package hide-mode-line
    :defer t
    :ensure t)

  ;; This keys are to go to the next or previous slide. It uses ~evil-collection key-map
  (evil-define-key 'normal 'org-tree-slide-mode-map
    "{"  'org-tree-slide-move-previous-tree
    "}"  'org-tree-slide-move-next-tree)
#+end_src

When showing your slides you want to remove all distractions right? This hooks do it.
#+begin_src emacs-lisp
  (eval-after-load "org-tree-slide"
    '(progn
       (add-hook 'org-tree-slide-play-hook
		 (lambda ()
		   (org-display-inline-images 1)
		   (hide-mode-line-mode 1)
		   (display-line-numbers-mode -1)
		   (variable-pitch-mode 1)))
       (add-hook 'org-tree-slide-stop-hook
		 (lambda ()
		   (org-display-inline-images -1)
		   (hide-mode-line-mode -1)
		   (display-line-numbers-mode 1)
		   (variable-pitch-mode -1)))))
#+end_src
** Agenda
Org-mode is a TODO and scheduling format. So it has an integrated agenda. You can configure it and make it looks like you want it.

Let's define some basic stuff first
#+begin_src emacs-lisp
 ;; (setq org-directory "/mnt/Data/ORG") ; The directory of your files
 ;; (setq org-agenda-files '(
 ;;                          ("/mnt/data/Nextcloud/ORG/sync/TODO.org")
 ;;                          ("/mnt/data/Nextcloud/ORG/escuela.org")))
  (global-set-key (kbd "C-c a") 'org-agenda) ; Keybinding to open the agenda buffer
  
  ;; by default the agenda takes the current buffer. With this it'll create its own buffer
  (setq org-agenda-window-setup 'other-window)
  (setq org-agenda-span 7) ; Only shows next 3 days
  (setq org-agenda-start-on-weekday nil) ;;Agenda start on monday
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  
  ;; Since I speak spanish as my mother language, I want the days and months in spanish. Without this it'll remain on english.
  (setq calendar-day-name-array ["domingo" "lunes" "martes" "miércoles" "jueves" "viernes" "sábado"])
  (setq calendar-month-name-array ["enero" "febrero" "marzo" "abril" "mayo" "junio" "julio" "agosto" "septiembre" "octubre" "noviembre" "diciembre"])
  
  ;; Activate hl-line-mode on agenda buffers
  (add-hook 'org-agenda-mode-hook 'hl-line-mode)
#+end_src

Now, this is pure eye-candy
#+begin_src emacs-lisp

  ;; Removes the ~======~ between blocks. It's ugly IMO
  (setq org-agenda-block-separator (string-to-char " "))
  (setq org-agenda-window-setup 'current-window)

  ;;Remove ths strings ~SCHEDULED:~ and ~DEADLINE:~ 
  (setq org-agenda-scheduled-leaders '("" ""))
  (setq org-agenda-deadline-leaders '("🕓" "En %d días:" "Hace %d días:"))

  ;; Custom fonts! I'm using Ubuntu fonts here... I'm not sure why.
  (custom-theme-set-faces 'user
                          '(org-agenda-date-today ((t (:weight bold :height 130)))) ; Today
                          '(org-agenda-structure ((t (:underline nil :weight bold :height 150 :width normal)))) ; Titles
                          '(org-agenda-calendar-event ((t (:inherit (default)))))
                          '(org-agenda-calendar-sexp ((t (:inherit (default))))));Rest of the text
#+end_src


This is my own agenda. It has the modules I want, the way I want. To run it, press ~o~.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("o" "My Agenda"
           ((agenda "" (
                        (org-agenda-files '("/mnt/data/Nextcloud/ORG/sync/TODO.org"))
                        (org-agenda-overriding-header "📅 Calendario\n")
                        (org-agenda-skip-scheduled-if-done t)
                        (org-agenda-skip-timestamp-if-done t)
                        (org-agenda-skip-deadline-if-done t)
                        (org-agenda-skip-deadline-prewarning-if-scheduled nil)
                        (org-agenda-start-day "+0d")
                        (org-agenda-span 7)
                        (org-agenda-prefix-format "  %?-t %T %?5s")
                        (org-agenda-repeating-timestamp-show-all t)
                        ;;(concat "  %-3i  %-15b %t%s" org-agenda-hidden-separator)
                        (org-agenda-remove-tags t)
                   (org-agenda-todo-keyword-format " ")
                    (org-agenda-time)
                    (org-agenda-current-time-string "⮜┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ ahora")
                    ;(org-agenda-deadline-leaders '("" ""))
                    (org-agenda-time-grid (quote ((today require-timed) (800 1000 1200 1400 1600 1800 2000 2200) "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))))
  
            (todo "NEXT" (
                          (org-agenda-files '("/mnt/data/Nextcloud/ORG/sync/TODO.org"))
                          (org-agenda-overriding-header "⭐ Siguientes\n")
                          (org-agenda-remove-tags nil)
                          (org-agenda-hide-tags-regexp "^\@")
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-prefix-format "%T %?-s")
                          (org-agenda-todo-keyword-format "")))
  
            (todo "ESPERANDO" (
                          (org-agenda-files '("/mnt/data/Nextcloud/ORG/sync/TODO.org"))
                          (org-agenda-overriding-header "🕘 Esperando\n")
                          (org-agenda-remove-tags nil)
                          (org-agenda-hide-tags-regexp "^\@")
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-prefix-format "%T %?-s")
                          (org-agenda-todo-keyword-format "")))
  
  
            (todo "PROJ" (
                          (org-agenda-files '("/mnt/data/Nextcloud/ORG/sync/TODO.org"))
                          (org-agenda-overriding-header "✈ Proyectos\n")
                          (org-agenda-remove-tags nil)
                          (org-agenda-hide-tags-regexp "^\@")
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-prefix-format "%T %?-s")
                          (org-agenda-todo-keyword-format "")))
  
            (todo "" (
                          (org-agenda-files '("/mnt/data/Nextcloud/ORG/sync/TODO.org"))
                          (org-agenda-overriding-header "☑ Tareas\n")
                          (org-agenda-remove-tags nil)
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-prefix-format "%?-s")
                          (org-agenda-todo-keyword-format "%-1s")))))
  
          ("h" "Horario escolar"
           ((agenda "" (
                        (org-agenda-files '("/mnt/data/CIMB/horario.org"))
                        (org-agenda-overriding-header "🗓 Horario\n")
                        (org-agenda-skip-scheduled-if-done t)
                        (org-agenda-skip-timestamp-if-done t)
                        (org-agenda-skip-deadline-if-done t)
                        (org-agenda-skip-deadline-prewarning-if-scheduled nil)
                        (org-agenda-start-day "+0d")
                        (org-agenda-span 1)
                        (org-agenda-prefix-format "  %?-t %T %?5s")
                        (org-agenda-repeating-timestamp-show-all t)
                        ;;(concat "  %-3i  %-15b %t%s" org-agenda-hidden-separator)
                        (org-agenda-remove-tags t)
                   (org-agenda-todo-keyword-format " ")
                    (org-agenda-time)
                    (org-agenda-current-time-string "⮜┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ ahora")
                    ;(org-agenda-deadline-leaders '("" ""))
                    (org-agenda-time-grid (quote ((today require-timed) (800 1000 1200 1400 1600 ) "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))))))))
#+end_src


Finally, this function it's needed to spawn a floating agenda with my Window Manger
#+begin_src emacs-lisp
  (defun agenda-frame ()
    (interactive)
    (org-agenda nil "o")
    (delete-other-windows))
#+end_src

** Refile
#+begin_src emacs-lisp
  (setq org-refile-targets
	'(("../DONE.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
** calfw
   Org-agenda shows your entries as a list. If you want a calendar view, then you need to rely on this awesome package called ~calfw~. To run it, run ~cfw:open-calendar-buffer~ or ~cfw:open-org-calendar~. 
   #+begin_src emacs-lisp
     (use-package calfw
       :ensure t)
     (use-package calfw-org
       :ensure t)
   #+end_src
** Org-capture
    Org-capture allows to capture text at any moment, just call the buffer, write text and automatically it will be appended to the selected file. This are my templates.
 #+begin_src emacs-lisp
   (global-set-key (kbd "C-c c") 'org-capture)
      (setq org-capture-templates
            '(
              ("i" "Inbox" entry
               (file "/mnt/data/Nextcloud/ORG/sync/Inbox.org"))
              ("d" "Diario de clase")
              ("d3" "Tercero")
              ("d3a" "Bitácora de 3A" plain
               (file+olp+datetree "/mnt/data/Nextcloud/ORG/journal.org")
                "**** %? :3A:\n")
              ("d3b" "Bitácora de 3B" plain
               (file+olp+datetree "/mnt/data/Nextcloud/ORG/journal.org")
                "**** %? :3B:\n")
              ("d3c" "Bitácora de 3C" plain
               (file+olp+datetree "/mnt/data/Nextcloud/ORG/journal.org")
                "**** %? :3C:\n")
              ("d3d" "Bitácora de 3D" plain
               (file+olp+datetree "/mnt/data/Nextcloud/ORG/journal.org")
                "**** %? :3D:\n")))
 #+end_src
   
 It's possible to call org-capture from anywhere using the Window Manager. To have a floating window, this snippet its needed
 #+begin_src emacs-lisp
   ;; Org capture flotante
   (defadvice org-capture-finalize
   (after delete-capture-frame activate)
   "Advise capture-finalize to close the frame"
   (if (equal "capture" (frame-parameter nil 'name))
   (delete-frame)))
   
   (defadvice org-capture-destroy
   (after delete-capture-frame activate)
   "Advise capture-destroy to close the frame"
   (if (equal "capture" (frame-parameter nil 'name))
   (delete-frame)))
   
   (defadvice org-switch-to-buffer-other-window
       (after supress-window-splitting activate)
     "Delete the extra window if we're in a capture frame"
     (if (equal "capture" (frame-parameter nil 'name))
         (delete-other-windows)))
   
   (defadvice org-capture-finalize
       (after delete-capture-frame activate)
     "Advise capture-finalize to close the frame"
     (if (equal "capture" (frame-parameter nil 'name))
         (delete-frame))) 
   
   (defun capture-frame ()
     (interactive)
     (org-capture)
     (delete-other-windows))
 #+end_src
** org babel
   Org-babel allows to run code inside Emacs and print the output right after the code block. Babel it's used to create this config file. You need the required compilers and everything if you add more languages here. By default, babel only evaluates elisp.
 #+begin_src emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (shell . t)))
 #+end_src
 
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** Org appear
This package hides the emphasis characters. Similar to the =conceal= feature of vim.
#+begin_src emacs-lisp
  (use-package org-appear
    :config
    ;; This is needed to org-appear
    (setq org-hide-emphasis-markers t)
    (setq org-pretty-entities t)
    (setq org-link-descriptive t)
    (setq org-appear-autoemphasis t)
    (setq org-appear-autolinks t)
    (setq org-appear-autosubmarkers t)
	
    :hook (org-mode . org-appear-mode))

#+end_src
** Org publish
Who needs a static web generator with emacs? Write your web page or project on org mode and export it to a complete web site, and in my case, a gemini capsule too. Just run =org-publish-all= or  =org-publish-project=.

First I want the exporter for gemini
#+begin_src emacs-lisp
  (use-package ox-gemini
    :config
    (require 'ox-gemini))
#+end_src

Now, lets put the configuration of org publish.
#+begin_src emacs-lisp
    (require 'ox-publish)
    (setq org-publish-project-alist
          '(("http_website"
             :base-directory "/mnt/data/www/source/en/"
             :base-extension "org"
             :publishing-directory "/mnt/data/www/site/en/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :exclude "GEM_.*"
             :with-date t
             :html-head "<link rel=stylesheet type=text/css href=https://juancastro.xyz/assets/style.css>"
             :html-head-include-default-style nil
             :with-toc nil
             :html-postamble t
             :html-preamble t
             :html-preamble-format (("en" "<header>
  <div class=main>
    <a href=https://juancastro.xyz><h1 class=site-title>Juan Castro</h1></a>
  </div>
  <nav>
    <a href=https://juancastro.xyz>Home</a> 
    <a href=https://juancastro.xyz/en/sitemap.html>All posts</a>
    <a href=https://juancastro.xyz/en/about.html>About</a>
  </nav>
  </header>"))
             :html-postamble-format (("en" "<footer id=footer class=footer> <p><a rel=license href=http://creativecommons.org/licenses/by-sa/4.0/>CC-BY-SA</a> Juan Castro | Made with Emacs 27 (Org-mode 9.4.4) <a href=https://juancastro.xyz/es/index.html>Página en español</a></footer>"))
            :section-numbers nil
             :headline-levels 4             ; Just the default for this project.
             :auto-sitemap t
             :sitemap-title "All posts"
             )
  
          ("http_website_español"
             :base-directory "/mnt/data/www/source/es/"
             :base-extension "org"
             :publishing-directory "/mnt/data/www/site/es/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :exclude "GEM_.*"
             :with-date t
             :html-head "<link rel=stylesheet type=text/css href=https://juancastro.xyz/assets/style.css>"
             :html-head-include-default-style nil
             :with-toc nil
             :html-postamble t
             :html-preamble t
             :html-preamble-format (("en" "<header>
  <div class=main>
    <a href=https://juancastro.xyz/es/index.html><h1 class=site-title>Juan Castro</h1></a>
  </div>
  <nav>
    <a href=https://juancastro.xyz/es/index.html>Inicio</a> 
    <a href=https://juancastro.xyz/es/sitemap.html>Publicaciones</a>
    <a href=https://juancastro.xyz/es/acerca.html>Acerca</a>
  </nav>
  </header>"))
             :html-postamble-format (("en" "<footer id=footer class=footer> <p><a rel=license href=http://creativecommons.org/licenses/by-sa/4.0/>CC-BY-SA</a> Juan Castro | Hecho con Emacs 27 (Org-mode 9.4.4)<a href=https://juancastro.xyz>English site</a></footer>"))
            :section-numbers nil
             :headline-levels 4             ; Just the default for this project.
             :auto-sitemap t
             :sitemap-title "Todas las publicaciones"
             )
  
            ("gemini_capsule"
             :base-directory "/mnt/data/www/source/"
             :base-extension "org"
             :publishing-directory "/mnt/data/www/capsule/"
             :recursive t
             :publishing-function org-gemini-publish-to-gemini
             :exclude "index"
             :with-date t
             :with-toc nil
             :section-numbers nil
             ;:html-postable nil
             :headline-levels 4             ; Just the default for this project.
             ;:auto-preamble t
             )))
#+end_src

** Org caldav

#+begin_src emacs-lisp
 ; (add-to-list 'load-path "~/.repos/org-caldav")
 ; (setq org-icalendar-include-todo 'all
 ;       org-caldav-sync-todo t
 ;       org-icalendar-categories '(local-tags)
 ;       org-caldav-url "https://cloud.juancastro.xyz/remote.php/dav/calendars/admin/"
 ;       org-caldav-calendar-id "prueba"
 ;       org-caldav-files '("~/ywy.org")
 ;       org-caldav-inbox "~/testing-caldav.org")
 ; (require 'org-caldav)
#+end_src
** Org reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    ;(setq org-re-reveal-center t)
    (setq org-reveal-root "file:///home/juan/.repos/reveal.js"))
#+end_src

** Org roam

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "/mnt/data/Nextcloud/Notas/")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src
* Term
** Vterm
Vterm is a real terminal emulator based on libvterm.

#+begin_src emacs-lisp
 ;; (use-package vterm)
  
#+end_src
** Eshell
The Emacs shell! It works fine for simple tasks, and has an awesome integration with emacs itself. If I need some complex CLI or TUI programs I just use alacritty.
#+begin_src emacs-lisp
  (use-package fish-completion
       :after esh-mode
       :ensure t
     :hook (eshell-mode . fish-completion-mode))

     (use-package eshell-syntax-highlighting
     :ensure t
     :after esh-mode
     :config
     (eshell-syntax-highlighting-global-mode +1))

   (use-package esh-autosuggest
   :ensure t
     :hook (eshell-mode . esh-autosuggest-mode))

     (use-package eshell-toggle
     :ensure t
     :bind ("<f4>" . eshell-toggle)
     :custom
     (eshell-toggle-size-fraction 3)
     (eshell-toggle-run-command nil))

  (use-package eshell
    :ensure nil
    :config
    (setq eshell-banner-message (concat (shell-command-to-string "fortune-es") "\n\n")))


#+end_src

* mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "/mnt/data/.mail/juancastro.xyz")

    (setq mu4e-drafts-folder "/Drafts")
    (setq mu4e-sent-folder   "/Sent")
    (setq mu4e-refile-folder "/All Mail")
    (setq mu4e-trash-folder  "/Trash")

    (setq mu4e-maildir-shortcuts
          '((:maildir "/Inbox"     :key ?i)
            (:maildir "/Sent"      :key ?s)
            (:maildir "/Trash"     :key ?t)
            (:maildir "/Drafts"    :key ?d)
            (:maildir "/All Mail"  :key ?a)))

    (setq smtpmail-smtp-server "mail.juancastro.xyz"
          smtpmail-smtp-service 587
          smtpmail-stream-type  'starttls)

    (setq message-send-mail-function 'smtpmail-send-it)
    (setq mu4e-compose-format-flowed t)
    (setq user-mail-address "juan@juancastro.xyz")
    (setq user-full-name "Juan Adrián Castro Quintana")
    (setq mu4e-compose-signature "Juan Adrián Castro Quintana")

    (mu4e t))

#+end_src

Notifications
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :config
    (mu4e-alert-set-default-style 'libnotify))
#+end_src
* Other formats, languages and programs
** Lua support
I don't code too much LUA, but it's good to have, at least, color syntax.
#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'"
    :ensure t)

  (use-package luarocks
    :after (lua)
    :ensure t)
#+end_src
** Markdown
  Though I don't use markdown a lot on Emacs, it's fine to have syntax highlightning and some functionality with ~pandoc~. It needs ~pandoc~ installed. If you're on arch and you doesn't work with Haskell, download ~pandoc-bin~ from AUR and evade the +750Mb of haskell libraries.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
  (setq markdown-command "/usr/bin/pandoc")
#+end_src

** Easy Hugo
Run ~hugo~ commands from Emacs and administrate your blogs. It needs ~hugo~ installed and configured. Note that evil mode is disabled for ~easy-hugo~.
#+begin_src emacs-lisp
  (use-package easy-hugo
    :ensure t
    :commands easy-hugo
    :init 
    ;;; Main blog. you can have more if you want
    (setq easy-hugo-basedir "/mnt/Data/Blog/")
    (setq easy-hugo-postdir "content/posts/")
    :config
    (add-to-list 'evil-emacs-state-modes 'easy-hugo-mode)
    (setq easy-hugo-default-ext ".org")
    (setq easy-hugo-org-header t))
#+end_src

** Ledger
Ledger it's a program to keep track of your expenses. It's very unix-y, it reads a text file with a very simple and human-readable format and prints out information about your balance. This is a mode to easily write the transactions and run ledger directly from Emacs.

#+begin_src emacs-lisp
    (use-package ledger-mode
      :ensure t
      :mode "\\.lgr\\'"
      :config
      (evil-define-key 'normal ledger-mode-map (kbd "SPC r") 'ledger-report)
      (evil-define-key 'normal ledger-mode-map (kbd "SPC i") 'ledger-add-transaction))

    (use-package evil-ledger
      :ensure t
      :after ledger-mode
      :hook
      (ledger-mode . evil-ledger-mode))
#+end_src

** Kdeconnect
A =kdeconnect= client inside emacs. I want to integrate it with dired.
#+begin_src emacs-lisp
  (use-package kdeconnect
    :ensure t
    :config
    (setq kdeconnect-devices "7843123afa92d0a8")
    (setq kdeconnect-active-device "7843123afa92d0a8"))

#+end_src
** Pinentry
Pinentry is the password prompt used by GPG. With this package, instead of use the Qt or GTK window, it will ask for a password in the minibuffer.
#+begin_src emacs-lisp
 ; (use-package pinentry
 ;   :init
 ;   (pinentry-start))   
#+end_src
** Gemini
A better web.. Adds colorscheme for gmi files
#+begin_src emacs-lisp
  (use-package gemini-mode)
#+end_src
* pdftools
PDF-tools is a better pdf viewer for emacs.
#+begin_src emacs-lisp
;  (use-package pdf-tools
;    :ensure t)
#+end_src
** org-pdftools
Take notes with org mode!
#+begin_src emacs-lisp
  ;;(use-package org-noter
  ;;  :config
  ;;  ;; Your org-noter config ........
  ;;  (require 'org-noter-pdftools))
  ;;
  ;;(use-package org-pdftools
  ;;  :hook (org-mode . org-pdftools-setup-link))
  ;;
  ;;(use-package org-noter-pdftools
  ;;  :after org-noter
  ;;  :config
  ;;  ;; Add a function to ensure precise note is inserted
  ;;  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
  ;;    (interactive "P")
  ;;    (org-noter--with-valid-session
  ;;     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
  ;;                                                   (not org-noter-insert-note-no-questions)
  ;;                                                 org-noter-insert-note-no-questions))
  ;;           (org-pdftools-use-isearch-link t)
  ;;           (org-pdftools-use-freestyle-annot t))
  ;;       (org-noter-insert-note (org-noter--get-precise-info)))))
  ;;
  ;;  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  ;;  (defun org-noter-set-start-location (&optional arg)
  ;;    "When opening a session with this document, go to the current location.
  ;;With a prefix ARG, remove start location."
  ;;    (interactive "P")
  ;;    (org-noter--with-valid-session
  ;;     (let ((inhibit-read-only t)
  ;;           (ast (org-noter--parse-root))
  ;;           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
  ;;       (with-current-buffer (org-noter--session-notes-buffer session)
  ;;         (org-with-wide-buffer
  ;;          (goto-char (org-element-property :begin ast))
  ;;          (if arg
  ;;              (org-entry-delete nil org-noter-property-note-location)
  ;;            (org-entry-put nil org-noter-property-note-location
  ;;                           (org-noter--pretty-print-location location))))))))
  ;;  (with-eval-after-load 'pdf-annot
  ;;    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
* Nix
#+begin_src emacs-lisp
  (use-package nix-sandbox
    :ensure t)
#+end_src
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

